Abstract data type Wikipedia Abstract data type From Wikipedia free encyclopedia Jump navigation Jump search Not be confused with algebraic data type This article has multiple issues Please help improve it discuss these issues on talk page Learn remove these template messages This article possibly contains original research Please improve it by verifying claims made adding inline citations Statements consisting only original research should be removed March Learn remove this template message This article needs additional citations verification Please help improve this article by adding citations reliable sources Unsourced material may be challenged removed Find sources Abstract data type news newspapers books scholar JSTOR May Learn remove this template message Learn remove this template message In computer science an abstract data type ADT mathematical model data types data type defined by its behavior semantics from point view user data specifically in terms possible values possible operations on data this type behavior these operations This contrasts with data structures which are concrete representations data are point view an implementer not user Formally an ADT may be defined as class objects whose logical behavior defined by set values set operations this analogous an algebraic structure in mathematics meant by behavior varies by author with two main types formal specifications behavior being axiomatic algebraic specification an abstract model these correspond axiomatic semantics operational semantics an abstract machine respectively Some authors also include computational complexity cost both in terms time computing operations space representing values In practice many common data types are not ADTs as abstraction not perfect users must be aware issues like arithmetic overflow that are due representation example integers are often stored as fixed width values bit bit binary numbers thus experience integer overflow if maximum value exceeded ADTs are theoretical concept in computer science used in design analysis algorithms data structures software systems do not correspond specific features computer languages mainstream computer languages do not directly support formally specified ADTs However various language features correspond certain aspects ADTs are easily confused with ADTs proper these include abstract types opaque data types protocols design by contract ADTs were first proposed by Barbara Liskov Stephen N Zilles in as part development CLU language Contents Examples Introduction Defining an abstract data type Imperative style definition Abstract variable Instance creation Example abstract stack imperative Single instance style Functional style definition Example abstract stack functional Whether include complexity Advantages abstract data typing Encapsulation Localization change Flexibility Typical operations Examples Implementation Example implementation abstract stack Imperative style interface Functional style interface ADT libraries Built in abstract data types See also Notes Citations References Further reading External links Examples edit example integers are an ADT defined as values by operations addition subtraction multiplication division together with greater than less than etc which behave according familiar mathematics with care integer division independently integers are represented by computer Explicitly behavior includes obeying various axioms associativity commutativity addition etc preconditions on operations cannot divide by zero Typically integers are represented in data structure as binary numbers most often as two s complement but might be binary coded decimal in ones complement but user abstracted from concrete choice representation can simply use data as data types An ADT consists not only operations but also values underlying data constraints on operations An interface typically refers only operations perhaps some constraints on operations notably pre conditions post conditions but not other constraints such as relations between operations example an abstract stack which last in first out structure could be defined by three operations push that inserts data item onto stack pop that removes data item from it peek top that accesses data item on top stack without removal An abstract queue which first in first out structure would also have three operations enqueue that inserts data item into queue dequeue that removes first data item from it front that accesses serves first data item in queue would be no way differentiating these two data types unless mathematical constraint introduced that stack specifies that each pop always returns most recently pushed item that has not been popped yet analyzing efficiency algorithms that use stacks one may also specify that all operations take same time no matter many data items have been pushed into stack that stack uses constant amount storage each element Introduction edit Abstract data types are purely theoretical entities used among other things simplify description abstract algorithms classify evaluate data structures formally describe type systems programming languages However an ADT may be implemented by specific data types data structures in many ways in many programming languages described in formal specification language ADTs are often implemented as modules module s interface declares procedures that correspond ADT operations sometimes with comments that describe constraints This information hiding strategy allows implementation module be changed without disturbing client programs term abstract data type can also be regarded as generalized approach number algebraic structures such as lattices groups rings notion abstract data types related concept data abstraction important in object oriented programming design by contract methodologies software development Defining an abstract data type edit An abstract data type defined as mathematical model data objects that make up data type as well as functions that operate on these objects are no standard conventions defining them broad division may be drawn between imperative functional definition styles Imperative style definition edit In philosophy imperative programming languages an abstract data structure conceived as an entity that mutable meaning that it may be in different states at different times Some operations may change state ADT therefore order in which operations are evaluated important same operation on same entities may have different effects if executed at different times just like instructions computer commands procedures an imperative language underscore this view it customary say that operations are executed applied rather than evaluated imperative style often used describing abstract algorithms See Art Computer Programming by Donald Knuth more details Abstract variable edit Imperative style definitions ADT often depend on concept an abstract variable which may be regarded as simplest non trivial ADT An abstract variable V mutable entity that admits two operations store V x x value unspecified nature fetch V that yields value with constraint that fetch V always returns value x used in most recent store V x operation on same variable V As in so many programming languages operation store V x often written V x some similar notation fetch V implied whenever variable V used in context value required Thus example V V commonly understood be shorthand store V fetch V In this definition it implicitly assumed that storing value into variable U has no effect on state distinct variable V make this assumption explicit one could add constraint that if U V are distinct variables sequence store U x store V y equivalent store V y store U x More generally ADT definitions often assume that any operation that changes state one ADT instance has no effect on state any other instance including other instances same ADT unless ADT axioms imply that two instances are connected aliased in that sense example extending definition abstract variable include abstract records operation that selects field from record variable R must yield variable V that aliased that part R definition an abstract variable V may also restrict stored values x members specific set X called range type V As in programming languages such restrictions may simplify description analysis algorithms improve readability Note that this definition does not imply anything about result evaluating fetch V V un initialized that before performing any store operation on V An algorithm that does so usually considered invalid its effect not defined However are some important algorithms whose efficiency strongly depends on assumption that such fetch legal returns some arbitrary value in variable s range citation needed Instance creation edit Some algorithms need create new instances some ADT such as new variables new stacks describe such algorithms one usually includes in ADT definition create operation that yields an instance ADT usually with axioms equivalent result create distinct from any instance in use by algorithm This axiom may be strengthened exclude also partial aliasing with other instances On other hand this axiom still allows implementations create yield previously created instance that has become inaccessible program Example abstract stack imperative edit As another example an imperative style definition an abstract stack could specify that state stack S can be modified only by operations push S x x some value unspecified nature pop S that yields value as result with constraint that any value x any abstract variable V sequence operations push S x V pop S equivalent V x Since assignment V x by definition cannot change state S this condition implies that V pop S restores S state it had before push S x From this condition from properties abstract variables it follows example that sequence push S x push S y U pop S push S z V pop S W pop S x y z are any values U V W are pairwise distinct variables equivalent U y V z W x Here it implicitly assumed that operations on stack instance do not modify state any other ADT instance including other stacks that any values x y any distinct stacks S T sequence push S x push T y equivalent push T y push S x An abstract stack definition usually includes also Boolean valued function empty S create operation that returns stack instance with axioms equivalent create S any prior stack S newly created stack distinct from all previous stacks empty create newly created stack empty not empty push S x pushing something into stack makes it non empty Single instance style edit Sometimes an ADT defined as if only one instance it existed during execution algorithm all operations were applied that instance which not explicitly notated example abstract stack above could have been defined with operations push x pop that operate on only existing stack ADT definitions in this style can be easily rewritten admit multiple coexisting instances ADT by adding an explicit instance parameter like S in previous example every operation that uses modifies implicit instance On other hand some ADTs cannot be meaningfully defined without assuming multiple instances This case single operation takes two distinct instances ADT as parameters an example consider augmenting definition abstract stack with an operation compare S T that checks whether stacks S T contain same items in same order Functional style definition edit Another way define an ADT closer spirit functional programming consider each state structure as separate entity In this view any operation that modifies ADT modeled as mathematical function that takes old state as an argument returns new state as part result Unlike imperative operations these functions have no side effects Therefore order in which they are evaluated immaterial same operation applied same arguments including same input states will always return same results output states In functional view in particular no way need define an abstract variable with semantics imperative variables namely with fetch store operations Instead storing values into variables one passes them as arguments functions Example abstract stack functional edit example complete functional style definition an abstract stack could use three operations push takes stack state an arbitrary value returns stack state top takes stack state returns value pop takes stack state returns stack state In functional style definition no need create operation Indeed no notion stack instance stack states can be thought as being potential states single stack structure two stack states that contain same values in same order are considered be identical states This view actually mirrors behavior some concrete implementations such as linked lists with hash cons Instead create functional style definition an abstract stack may assume existence special stack state empty stack designated by special symbol like define bottom operation that takes no arguments returns this special stack state Note that axioms imply that push x In functional style definition stack one does not need an empty predicate instead one can test whether stack empty by testing whether it equal Note that these axioms do not define effect top s pop s unless s stack state returned by push Since push leaves stack non empty those two operations are undefined hence invalid s On other hand axioms lack side effects imply that push s x push t y if only if x y s t As in some other branches mathematics it customary assume also that stack states are only those whose existence can be proved from axioms in finite number steps In abstract stack example above this rule means that every stack finite sequence values that becomes empty stack after finite number pops By themselves axioms above do not exclude existence infinite stacks that can be poped forever each time yielding different state circular stacks that return same state after finite number pops In particular they do not exclude states s such that pop s s push s x s some x However since one cannot obtain such stack states with given operations they are assumed not exist Whether include complexity edit Aside from behavior in terms axioms it also possible include in definition an ADT operation algorithmic complexity Alexander Stepanov designer C Standard Template Library included complexity guarantees in STL specification arguing reason introducing notion abstract data types was allow interchangeable software modules cannot have interchangeable modules unless these modules share similar complexity behavior If replace one module with another module with same functional behavior but with different complexity tradeoffs user this code will be unpleasantly surprised could tell him anything like about data abstraction he still would not want use code Complexity assertions have be part interface Alexander Stepanov Advantages abstract data typing edit This section needs additional citations verification Please help improve this article by adding citations reliable sources Unsourced material may be challenged removed Find sources Abstract data type news newspapers books scholar JSTOR May Learn remove this template message Encapsulation edit Abstraction provides promise that any implementation ADT has certain properties abilities knowing these all that required make use an ADT object user does not need any technical knowledge implementation works use ADT In this way implementation may be complex but will be encapsulated in simple interface it actually used Localization change edit Code that uses an ADT object will not need be edited if implementation ADT changed Since any changes implementation must still comply with interface since code using an ADT object may only refer properties abilities specified in interface changes may be made implementation without requiring any changes in code ADT used Flexibility edit Different implementations ADT having all same properties abilities are equivalent may be used somewhat interchangeably in code that uses ADT This gives great deal flexibility using ADT objects in different situations example different implementations ADT may be more efficient in different situations it possible use each in situation they are preferable thus increasing overall efficiency Typical operations edit Some operations that are often specified ADTs possibly under other names are compare s t that tests whether two instances states are equivalent in some sense hash s that computes some standard hash function from instance s state print s show s that produces human readable representation instance s state In imperative style ADT definitions one often finds also create that yields new instance ADT initialize s that prepares newly created instance s further operations resets it some initial state copy s t that puts instance s in state equivalent that t clone t that performs s create copy s t returns s free s destroy s that reclaims memory other resources used by s free operation not normally relevant meaningful since ADTs are theoretical entities that do not use memory However it may be necessary one needs analyze storage used by an algorithm that uses ADT In that case one needs additional axioms that specify much memory each ADT instance uses as function its state much it returned pool by free Examples edit Some common ADTs which have proved useful in great variety applications are Container List Set Multiset Map Multimap Graph Tree Stack Queue Priority queue Double ended queue Double ended priority queue Each these ADTs may be defined in many ways variants not necessarily equivalent example an abstract stack may may not have count operation that tells many items have been pushed not yet popped This choice makes difference not only its clients but also implementation Abstract graphical data type An extension ADT computer graphics was proposed in an abstract graphical data type AGDT It was introduced by Nadia Magnenat Thalmann Daniel Thalmann AGDTs provide advantages ADTs with facilities build graphical objects in structured way Implementation edit Further information Opaque data type Implementing an ADT means providing one procedure function each abstract operation ADT instances are represented by some concrete data structure that manipulated by those procedures according ADT s specifications Usually are many ways implement same ADT using several different concrete data structures Thus example an abstract stack can be implemented by linked list by an array In order prevent clients from depending on implementation an ADT often packaged as an opaque data type in one more modules whose interface contains only signature number types parameters results operations implementation module namely bodies procedures concrete data structure used can then be hidden from most clients module This makes it possible change implementation without affecting clients If implementation exposed it known instead as transparent data type implementing an ADT each instance in imperative style definitions each state in functional style definitions usually represented by handle some sort Modern object oriented languages such as C Java support form abstract data types class used as type it an abstract type that refers hidden representation In this model an ADT typically implemented as class each instance ADT usually an object that class module s interface typically declares constructors as ordinary procedures most other ADT operations as methods that class However such an approach does not easily encapsulate multiple representational variants found in an ADT It also can undermine extensibility object oriented programs In pure object oriented program that uses interfaces as types types refer behaviors not representations Example implementation abstract stack edit As an example here an implementation abstract stack above in C programming language Imperative style interface edit An imperative style interface might be typedef struct stack Rep stack Rep type stack instance representation opaque record typedef stack Rep stack T type handle stack instance opaque pointer typedef void stack Item type value stored in stack instance arbitrary address stack T stack create void creates new empty stack instance void stack push stack T s stack Item x adds an item at top stack stack Item stack pop stack T s removes top item from stack returns it bool stack empty stack T s checks whether stack empty This interface could be used in following manner include stack h includes stack interface stack T s stack create creates new empty stack instance int x stack push s x adds address x at top stack void y stack pop s removes address x from stack returns it if stack empty s does something if stack empty This interface can be implemented in many ways implementation may be arbitrarily inefficient since formal definition ADT above does not specify much space stack may use nor long each operation should take It also does not specify whether stack state s continues exist after call x pop s In practice formal definition should specify that space proportional number items pushed not yet popped that every one operations above must finish in constant amount time independently that number comply with these additional specifications implementation could use linked list an array with dynamic resizing together with two integers an item count array size Functional style interface edit Functional style ADT definitions are more appropriate functional programming languages vice versa However one can provide functional style interface even in an imperative language like C example typedef struct stack Rep stack Rep type stack state representation opaque record typedef stack Rep stack T type handle stack state opaque pointer typedef void stack Item type value stack state arbitrary address stack T stack empty void returns empty stack state stack T stack push stack T s stack Item x adds an item at top stack state returns resulting stack state stack T stack pop stack T s removes top item from stack state returns resulting stack state stack Item stack top stack T s returns top item stack state ADT libraries edit Many modern programming languages such as C Java come with standard libraries that implement several common ADTs such as those listed above Built in abstract data types edit specification some programming languages intentionally vague about representation certain built in data types defining only operations that can be done on them Therefore those types can be viewed as built in ADTs Examples are arrays in many scripting languages such as Awk Lua Perl which can be regarded as an implementation abstract list See also edit Concept generic programming Formal methods Functional specification Generalized algebraic data type Initial algebra Liskov substitution principle Type theory Walls Mirrors Notes edit Compare characterization integers in abstract algebra Citations edit Dale Walker p Dale Walker p Liskov Zilles Rudolf Lidl Abstract Algebra Springer ISBN Chapter section Object Oriented Programming Hiring Upwork Retrieved Stevens Al March Al Stevens Interviews Alex Stepanov Dr Dobb s Journal Retrieved January D Thalmann N Magnenat Thalmann Design Implementation Abstract Graphical Data Types IEEE Proc rd International Computer Software Applications Conference COMPSAC IEEE Chicago USA pp Robert Sedgewick Algorithms in C Addison Wesley ISBN definition References edit Liskov Barbara Zilles Stephen Programming with abstract data types Proceedings ACM SIGPLAN Symposium on Very High Level Languages SIGPLAN Notices pp CiteSeerX doi Dale Nell Walker Henry M Abstract Data Types Specifications Implementations Applications Jones Bartlett Learning ISBN Further reading edit Mitchell John C Plotkin Gordon July Abstract Types Have Existential Type PDF ACM Transactions on Programming Languages Systems doi External links edit Media related Abstract data types at Wikimedia Commons Abstract data type in NIST Dictionary Algorithms Data Structures v t e Data structures Types Collection Container Abstract Associative array Multimap List Stack Queue Double ended queue Priority queue Double ended priority queue Set Multiset Disjoint set Arrays Bit array Circular buffer Dynamic array Hash table Hashed array tree Sparse matrix Linked Association list Linked list Skip list Unrolled linked list XOR linked list Trees B tree Binary search tree AA tree AVL tree Red black tree Self balancing tree Splay tree Heap Binary heap Binomial heap Fibonacci heap R tree R tree R tree Hilbert R tree Trie Hash tree Graphs Binary decision diagram Directed acyclic graph Directed acyclic word graph List data structures v t e Data types Uninterpreted Bit Byte Trit Tryte Word Bit array Numeric Arbitrary precision bignum Complex Decimal Fixed point Floating point Double precision Extended precision Long double Octuple precision Quadruple precision Single precision Reduced precision Minifloat Half precision bfloat Integer signedness Interval Rational Pointer Address physical virtual Reference Text Character String null terminated Composite Algebraic data type generalized Array Associative array Class Dependent Equality Inductive Intersection List Object metaobject Option type Product Record Struct Refinement Set Union tagged Other Boolean Bottom type Collection Enumerated type Exception Function type Opaque data type Recursive data type Semaphore Stream Top type Type class Unit type Void Related topics Abstract data type Data structure Generic Kind metaclass Parametric polymorphism Primitive data type Protocol interface Subtyping Type constructor Type conversion Type system Type theory See also platform dependent independent units information Authority control GND LCCN sh Retrieved from https en wikipedia org w index php title Abstract data type oldid Categories Abstract data types Data types Type theory Hidden categories Articles that may contain original research from March All articles that may contain original research Articles needing additional references from May All articles needing additional references Articles with multiple maintenance issues All articles with unsourced statements Articles with unsourced statements from May Articles needing additional references from May Commons category link on Wikidata Wikipedia articles with GND identifiers Wikipedia articles with LCCN identifiers Navigation menu Personal tools Not logged in Talk Contributions Create account Log in Namespaces Article Talk Variants Views Read Edit View history More Search Navigation Main page Contents Featured content Current events Random article Donate Wikipedia Wikipedia store Interaction Help About Wikipedia Community portal Recent changes Contact page Tools links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page In other projects Wikimedia Commons Print export Create book Download as PDF Printable version Languages Catal e tina Dansk Deutsch Espa ol Esperanto Fran ais Hrvatski Bahasa Indonesia Italiano Lietuvi Nederlands Polski Portugu s Sloven ina Suomi Tagalog Ti ng Vi t Edit links This page was last edited on November at UTC Text available under Creative Commons Attribution ShareAlike License additional terms may apply By using this site agree Terms Use Privacy Policy Wikipedia registered trademark Wikimedia Foundation Inc non profit organization Privacy policy About Wikipedia Disclaimers Contact Wikipedia Developers Statistics Cookie statement Mobile view